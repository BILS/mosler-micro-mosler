#!/usr/bin/env bash

function usage {
    echo "Usage: $0 command [options]"
    echo -e "\ncommands are:"
    echo -e "\tclean        \tRemoves allocated resources"
    echo -e "\tconnect      \tConnects via ssh into the VMs"
    echo -e "\tinit         \tInitializes the VMs"
    echo -e "\tprovision    \tConfigures the infracstructure"
    echo -e "\treset        \tRestores to the VMs to some original status"
    echo -e "\tsync         \tCopies relevant files to the VMs"

    echo -e "\nSupply --help (or -h) to see the options for each command"

    echo -e "\nExtra options"
    echo -e "\tboot         \tCheats and boots from a pre-made snapshot"
    echo -e "\tping         \tChecks if the VMs are up"
    echo -e "\tprepare      \tPrepares the virtual image to boot from"
    echo -e "\tsnapshot     \tSnapshots each VM"

    echo -e "\nThe typical order to set up MicroMosler is to call:"
    echo -e "\t$0 init --all   # --all to create networks too"
    echo -e "\t$0 sync"
    echo -e "\t$0 provision"
    echo ""
}

_ALL=no

case "$1" in
    init|clean|sync|provision|prepare|ping|snapshot|boot|reset|init-epouta)
	TASK=$1
	export TASK
	shift # Remove the command name from $@
	export MM_CMD="$0 ${TASK}"
	$(dirname ${BASH_SOURCE[0]})/lib/${TASK}.sh $@ # pass the remaining arguments
	;;
    connect)
	shift # Remove the command name from $@
	export MM_CMD="$0 connect"
	$(dirname ${BASH_SOURCE[0]})/lib/goto.sh $@ # pass the remaining arguments
	;;
    all) _ALL=yes;;
    *) echo "$0: error - unrecognized command $1" 1>&2; usage; exit 1;;
esac

if [ "${_ALL}" = "yes" ]; then

    if [[ "$@" =~ "--help" ]] || [[ "$@" =~ "-h" ]]; then
	echo "Usage: $0 all [options]"
	echo -e "\noptions are"
	echo -e "\t--net            \tCreates also networks, routers, security groups and floating IPs"
	echo -e "\t--image <img>,"
	echo -e "\t     -i <img>    \tGlance image to use. Defaults to ${_IMAGE}"
	echo -e "\t-q               \tShhh...Bambi is sleeping..."
	echo -e "\t--help,-h        \tOutputs this message and exits"
	exit 0
    fi

    shift # Remove the command name from $@

    ARGS="$@"
    _QUIET='no'
    if [[ "$ARGS" =~ "-q" ]]; then
	_QUIET='yes'
	ARGS=${ARGS/--quiet/}
	ARGS=${ARGS/-q/}
    fi

    echo "MicroMosler - All in one"
    source $(dirname ${BASH_SOURCE[0]})/lib/settings.sh
    [ ${_QUIET} == 'yes' ] && exec 1>${MM_TMP}/all-in-one.log

    set -e # exit on error
    echo "Booting the VMs"
    $0 init ${ARGS}

    T=30
    echo -n "Waiting the VMs to reboot: Sleeping $T seconds"
    #sleep $T
    for i in {1..$T}; do echo -n '.'; sleep 1; done; echo ''

    echo "Syncing the VMs"
    $0 sync

    echo "Provisioning the VMs"
    $0 provision

    exec 1>$(tty) # Back to normal
    echo "Environment ready"

fi
