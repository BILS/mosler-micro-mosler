# -*-sh-*-

echo "Configuring iptables"
# Remove the line
sed -i "/^-A INPUT -m state --state NEW -s {{ env['MGMT_CIDR']|replace('/','\/') }} -j ACCEPT/ d" /etc/sysconfig/iptables
# Insert it before the other line
sed -i "/^-A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT/ i \
-A INPUT -m state --state NEW -s {{ env['MGMT_CIDR']|replace('/','\/') }} -j ACCEPT" /etc/sysconfig/iptables

sed -i "/^-A INPUT -m state --state NEW -s {{ env['MOSLER_EXT_CIDR']|replace('/','\/') }} -j ACCEPT/ d" /etc/sysconfig/iptables
sed -i "/^-A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT/ i \
-A INPUT -m state --state NEW -s {{ env['MOSLER_EXT_CIDR']|replace('/','\/') }} -j ACCEPT" /etc/sysconfig/iptables

#service iptables restart # Not sure why this fails sometimes.
service iptables stop || true
service iptables start

echo "System config"
## RegExp, Replacement
{% set lines = [
	('^\s*net.ipv4.ip_forward\s*=.*$',                 'net.ipv4.ip_forward=1'                 ),
	('^\s*net.ipv4.conf.all.rp_filter\s*=.*$',         'net.ipv4.conf.all.rp_filter=0'         ),
	('^\s*net.ipv4.conf.default.rp_filter\s*=.*$',     'net.ipv4.conf.default.rp_filter=0'     ),
	('^\s*net.ipv4.conf.eth0.rp_filter\s*=.*$',        'net.ipv4.conf.eth0.rp_filter=0'        ),
	('^\s*net.ipv4.conf.eth1.rp_filter\s*=.*$',        'net.ipv4.conf.eth1.rp_filter=0'        ),
	('^\s*net.ipv4.conf.br-eth1.rp_filter\s*=.*$',     'net.ipv4.conf.br-eth1.rp_filter=0'     ),
	('^\s*net.bridge.bridge-nf-call-arptables\s*=.*$', 'net.bridge.bridge-nf-call-arptables=0' ),
	('^\s*net.bridge.bridge-nf-call-iptables\s*=.*$',  'net.bridge.bridge-nf-call-iptables=0'  ),
	('^\s*net.bridge.bridge-nf-call-ip6tables\s*=.*$', 'net.bridge.bridge-nf-call-ip6tables=0' ),
	('^\s*net.ipv6.conf.all.disable_ipv6\s*=.*$',      'net.ipv6.conf.all.disable_ipv6=1'      ),
	('^\s*net.ipv6.conf.default.disable_ipv6\s*=.*$',  'net.ipv6.conf.default.disable_ipv6=1'  ),
	('^\s*net.ipv4.conf.br-eth1.proxy_arp\s*=.*$',     'net.ipv4.conf.br-eth1.proxy_arp=1'     )
] -%}
{% for regexp, line in lines %}
sed -i -e '/{{ regexp }}/ d' /etc/sysctl.conf
echo '{{ line }}' >> /etc/sysctl.conf
{% endfor %}

# Activating kernel configurations (or use -e too)
sysctl -e -p

echo "Starting OpenVSwitch"
service openvswitch start
chkconfig openvswitch on
    
# echo "Creating the OVS bridge"
# ovs-vsctl add-br br-eth1 || true

# echo "Adding eth1 to the OVS bridge"
# ovs-vsctl add-port br-eth1 eth1 || true

CIDR={{ env['MOSLER_EXT_CIDR'] }}

mkdir -p /etc/sysconfig/network-scripts/org
[ ! -e /etc/sysconfig/network-scripts/org/ifcfg-eth1 ] && cp /etc/sysconfig/network-scripts/ifcfg-eth1 /etc/sysconfig/network-scripts/org/ifcfg-eth1
[ ! -e /etc/sysconfig/network-scripts/org/route-eth1 ] && cp /etc/sysconfig/network-scripts/route-eth1 /etc/sysconfig/network-scripts/org/route-eth1
[ ! -e /etc/sysconfig/network-scripts/org/rule-eth1 ] && cp /etc/sysconfig/network-scripts/rule-eth1 /etc/sysconfig/network-scripts/org/rule-eth1

BR_GATEWAY=${CIDR%.0/24}.1
BR_PREFIX=${CIDR##*/}

IPADDR=$(grep -r 'IPADDR=' /etc/sysconfig/network-scripts/org/ifcfg-eth1 | sed 's/IPADDR\s*=\s*//')
PREFIX=$(grep -r 'PREFIX=' /etc/sysconfig/network-scripts/org/ifcfg-eth1 | sed 's/PREFIX\s*=\s*//')
GATEWAY=$(grep -r 'GATEWAY=' /etc/sysconfig/network-scripts/org/ifcfg-eth1 | sed 's/GATEWAY\s*=\s*//')
    
cat > /etc/sysconfig/network-scripts/ifcfg-eth1 <<EOF
#TYPE=Ethernet
DEVICETYPE=ovs
TYPE=OVSPort
BOOTPROTO=none
OVS_BRIDGE=br-eth1
DEFROUTE=no
NAME=eth1
DEVICE=eth1
ONBOOT=yes
EOF

cat > /etc/sysconfig/network-scripts/ifcfg-br-eth1 <<EOF
DEVICE=br-eth1
NAME=br-eth1
ONBOOT=yes
BOOTPROTO=none
IPADDR=${IPADDR}
PREFIX=${PREFIX}
GATEWAY=${GATEWAY}
IPADDR2=${BR_GATEWAY}
PREFIX2=${BR_PREFIX}
#MTU=1450
#DEFROUTE=yes
DEVICETYPE=ovs
TYPE=OVSBridge
EOF

# Rules
cat > /etc/sysconfig/network-scripts/rule-br-eth1.tmp <<EOF
to $CIDR lookup ext
from $CIDR lookup ext
EOF
cat /etc/sysconfig/network-scripts/rule-br-eth1.tmp /etc/sysconfig/network-scripts/org/rule-eth1 > /etc/sysconfig/network-scripts/rule-br-eth1
rm -f /etc/sysconfig/network-scripts/rule-br-eth1.tmp
rm -f /etc/sysconfig/network-scripts/rule-eth1

# Routes
cat > /etc/sysconfig/network-scripts/route-br-eth1.tmp <<EOF
table ext $CIDR dev br-eth1
table ext blackhole default
EOF
sed 's/eth1/br-eth1/g' /etc/sysconfig/network-scripts/org/route-eth1 >> /etc/sysconfig/network-scripts/route-br-eth1.tmp
mv -f /etc/sysconfig/network-scripts/route-br-eth1.tmp /etc/sysconfig/network-scripts/route-br-eth1
rm -f /etc/sysconfig/network-scripts/route-eth1

echo "Cleaning virbr0"
service libvirtd stop
chkconfig libvirtd off
{ 
    ip link set dev virbr0-nic down
    ip link set dev virbr0 down
    brctl delif virbr0 virbr0-nic
    ip link del dev virbr0-nic
    brctl delbr virbr0
} || true

echo "Restarting network to bring up the bridge used by Openstack"
service network restart
# Delete route (added by DHCP client, I think)
ip route del 172.18.0.0/24 dev eth0 || true

{% if env['DO_CHEAT'] != 'yes' %}
echo "Correcting the Nova admin tenant id for Neutron"
source /root/.keystonerc
T=0
while (( ++T < 300 )) ; do
    nova_admin_tenant_id=$(keystone tenant-list | awk '/ services /{print $2}')
    [ $? -eq 0 ] && [ -n "${nova_admin_tenant_id}" ] && break;
    sleep 1
done
(( T >= 300 )) && exit 1
[ -z "${nova_admin_tenant_id}" ] && exit 1
sed -i -e "s/nova_admin_tenant_id=.*/nova_admin_tenant_id=${nova_admin_tenant_id}/" /etc/neutron/neutron.conf
{% endif %}

# echo "Deleting the virtual routers"
# ip netns | while read ns; do ip netns del $ns; done
echo "Cleaning the logs"
rm -f /var/log/neutron/{dhcp-agent,l3-agent,metadata-agent,openvswitch-agent}.log
rm -f /var/log/neutron/neutron-ns-metadata-proxy-*


sleep 10 # On the openstack-controller, services are first closing. Let's sleep
# Wait for Message Broker. Don't want to loose the messages
wait_port openstack-controller 5672 300
wait_port openstack-controller 9696 300

echo "Starting Neutron services"
{% set services = [ 'dhcp-agent',
		    'l3-agent',
		    'openvswitch-agent',
		    'metadata-agent',
		    'ovs-cleanup'
] -%}
{% for service in services %}
service neutron-{{ service }} restart
chkconfig neutron-{{ service }} on
{% endfor %}
