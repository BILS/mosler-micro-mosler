# -*-sh-*-

# Configuring iptables
sed -i "/^-A INPUT -m state --state NEW -s {{ env['MGMT_CIDR']|replace('/','\/') }} -j ACCEPT/ d" /etc/sysconfig/iptables
sed -i "/^-A INPUT -m state --state NEW -s {{ env['EXT_CIDR']|replace('/','\/') }} -j ACCEPT/ d" /etc/sysconfig/iptables
# Insert it before the other line
sed -i "/^-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT/ i \
-A INPUT -m state --state NEW -s {{ env['MGMT_CIDR']|replace('/','\/') }} -j ACCEPT" /etc/sysconfig/iptables
sed -i "/^-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT/ i \
-A INPUT -m state --state NEW -s {{ env['EXT_CIDR']|replace('/','\/') }} -j ACCEPT" /etc/sysconfig/iptables
service iptables restart

# System config
## RegExp, Replacement
{% set lines = [
	('^\s*net.ipv4.ip_forward\s*=.*$',                 'net.ipv4.ip_forward=1'                 ),
	('^\s*net.ipv4.conf.all.rp_filter\s*=.*$',         'net.ipv4.conf.all.rp_filter=0'         ),
	('^\s*net.ipv4.conf.default.rp_filter\s*=.*$',     'net.ipv4.conf.default.rp_filter=0'     ),
	('^\s*net.ipv4.conf.eth0.rp_filter\s*=.*$',        'net.ipv4.conf.eth0.rp_filter=0'        ),
	('^\s*net.ipv4.conf.eth1.rp_filter\s*=.*$',        'net.ipv4.conf.eth1.rp_filter=0'        ),
	('^\s*net.bridge.bridge-nf-call-arptables\s*=.*$', 'net.bridge.bridge-nf-call-arptables=0' ),
	('^\s*net.bridge.bridge-nf-call-iptables\s*=.*$',  'net.bridge.bridge-nf-call-iptables=0'  ),
	('^\s*net.bridge.bridge-nf-call-ip6tables\s*=.*$', 'net.bridge.bridge-nf-call-ip6tables=0' ),
	('^\s*net.ipv6.conf.all.disable_ipv6\s*=.*$',      'net.ipv6.conf.all.disable_ipv6=1'      ),
	('^\s*net.ipv6.conf.default.disable_ipv6\s*=.*$',  'net.ipv6.conf.default.disable_ipv6=1'  ),
	('^\s*net.ipv4.conf.veth1.proxy_arp\s*=.*$',       'net.ipv4.conf.veth1.proxy_arp=1'       )
] -%}
{% for regexp, line in lines %}
sed -i -e '/{{ regexp }}/ d' /etc/sysctl.conf
echo '{{ line }}' >> /etc/sysctl.conf
{% endfor %}

# Activating kernel configurations (or use -e too)
sysctl -e -p

#################################################################
    
CIDR={{ env['EXT_CIDR'] }}

OS_GATEWAY=${CIDR%.0/24}.1
OS_PREFIX=${CIDR##*/}

cat > /etc/sysconfig/network-scripts/ifcfg-veth1 <<EOF
NAME=veth1
DEVICE=veth1
IPADDR=${OS_GATEWAY}
PREFIX=${OS_PREFIX}
ONBOOT=yes
TYPE=veth
DEVICETYPE=veth
PATCH=osext
MTU=1450
EOF

# Rules
cat > /etc/sysconfig/network-scripts/rule-veth1 <<EOF
to $CIDR lookup ext
from $CIDR lookup ext
EOF

# Routes
cat > /etc/sysconfig/network-scripts/route-veth1 <<EOF
table ext $CIDR dev veth1 src ${OS_GATEWAY}
table ext blackhole default
EOF

# Restarting network to bring up the interface used by Openstack
systemctl restart network

###############################################################
# Starting the Message Broker
systemctl enable rabbitmq-server.service

systemctl stop rabbitmq-server.service
[ -f /var/log/rabbitmq/rabbit@neutron.log ] && rm -f /var/log/rabbitmq/rabbit@neutron.log
systemctl start rabbitmq-server.service

# Preparing the RabbitMQ user
rabbitmqctl add_user openstack rabbit || true
rabbitmqctl set_permissions openstack ".*" ".*" ".*"

# Memcached service
systemctl enable memcached.service
systemctl restart memcached.service

rm -rf /var/lib/neutron/tmp
mkdir -p /var/lib/neutron/tmp
chown neutron:neutron /var/lib/neutron/tmp

###############################################################
# MySQL configuration
systemctl stop mariadb.service
cat > /etc/my.cnf.d/openstack.cnf <<EOF
[mysqld]
bind-address = {{ env['NEUTRON_IP'] }}
default-storage-engine = innodb
innodb_file_per_table
max_connections = 4096
collation-server = utf8_general_ci
character-set-server = utf8
EOF

# Removing databases by hand
rm -rf /var/lib/mysql
mkdir --mode=0755 /var/lib/mysql
chown mysql:mysql /var/lib/mysql

systemctl enable mariadb.service
systemctl start mariadb.service

# MySQL Databases initial setup
# Note: Root password is empty at first, then set inside openstack_db.sql.
mysql -u root < {{ env['VAULT'] }}/openstack_db.sql

{% if env['DO_CHEAT'] == 'yes' %}
mysql -u root -pmysql < {{ env['VAULT'] }}/openstack_db_dump.sql
{% else %}
# Populate the database
#su -s /bin/sh -c "neutron-db-manage --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugin.ini upgrade head" neutron
su -s /bin/sh -c "neutron-db-manage --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head" neutron
#mysqldump -u root -pmysql --all-databases --opt > /home/centos/db_dump.sql
{% endif %}

###############################################################
# Cleaning the logs
rm -f /var/log/neutron/*
# rm -f /var/log/neutron/{dhcp-agent,l3-agent,metadata-agent,linuxbridge-agent}.log
# rm -f /var/log/neutron/neutron-ns-metadata-proxy-*
# #rm -rf /var/lib/neutron/dhcp/*

DATA_IP=$(ip -4 a s dev eth1 | awk '/inet/ { a = $2; b = gensub(/(.+)\/24/, "\\1", "g", a); print b}')
[ -z "$DATA_IP" ] && exit 1
openstack-config --set /etc/neutron/plugins/ml2/linuxbridge_agent.ini vxlan local_ip $DATA_IP

###############################################################
# Starting Neutron services
for s in server linuxbridge-agent dhcp-agent metadata-agent l3-agent
do
    systemctl enable neutron-${s}.service
    systemctl restart neutron-${s}.service
done
