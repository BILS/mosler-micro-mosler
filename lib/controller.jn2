# -*-sh-*-

#############################################################
{% include 'db.jn2' %}

{% include 'rabbit.jn2' %}

{% include 'openstack-common.jn2' %}

#############################################################

echo "Openstack Components"
yum -y install openstack-nova openstack-neutron openstack-neutron-ml2 \
openstack-dashboard openstack-keystone openstack-heat-engine openstack-heat-api openstack-heat-api-cfn openstack-glance memcached

echo "Openstack Mosler dashboard"
# Dependencies for 
yum -y install python-imaging python-qrcode mosler-dashboard-2-5.i386
for package in Django14-1.4.21-1.el6.noarch mosler-dashboard-2-5.i386 nginx-1.8.1-1.el6.ngx.x86_64
do
    if ! rpm -q $package > /dev/null ; then # Test if installed, since rpm -Uvh returns an exit status of 1
	rpm -ivh {{ env['VAULT'] }}/$package.rpm
    fi
done

echo "Copying config files"
rsync -a {{ env['VAULT'] }}/neutron.conf           /etc/neutron/neutron.conf
rsync -a {{ env['VAULT'] }}/keystone.conf          /etc/keystone/keystone.conf
rsync -a {{ env['VAULT'] }}/ml2.ini                /etc/neutron/plugins/ml2/ml2.ini
rsync -a {{ env['VAULT'] }}/nova.conf              /etc/nova/nova.conf
rsync -a {{ env['VAULT'] }}/glance-api.conf        /etc/glance/glance-api.conf
rsync -a {{ env['VAULT'] }}/glance-registry.conf   /etc/glance/glance-registry.conf
rsync -a {{ env['VAULT'] }}/heat.conf              /etc/heat/heat.conf
rsync -a {{ env['VAULT'] }}/local_settings         /etc/openstack-dashboard/local_settings

if [ -f /etc/neutron/plugin.ini ]; then
    rm /etc/neutron/plugin.ini
fi
ln -s /etc/neutron/plugins/ml2/ml2_conf.ini /etc/neutron/plugin.ini

echo "Memcached service"
service memcached restart
chkconfig memcached on

echo "Stopping Openstack Services"
{% set items = [ 'openstack-heat-api',
		 'openstack-heat-api-cfn',
		 'openstack-heat-engine',
		 'openstack-nova-api',
		 'openstack-nova-scheduler',
		 'openstack-nova-conductor',
		 'openstack-glance-api',
		 'neutron-server',
		 'openstack-glance-registry',
		 'httpd',
] -%}
{% for service in items %}
service {{ service }} stop
{% endfor %}

{% if env['DO_CHEAT'] == 'no' %}
echo "Preparing the databases"
su -s /bin/sh -c 'keystone-manage db_sync' keystone
su -s /bin/sh -c 'glance-manage db_sync' glance
su -s /bin/sh -c 'nova-manage db sync' nova
su -s /bin/sh -c 'heat-manage db_sync' heat
su -s /bin/sh -c 'neutron-db-manage --config-file /etc/neutron/neutron.conf  --config-file /etc/neutron/plugin.ini upgrade 5ac1c354a051' neutron
{% endif %}

# mysqldump -u root -pmysql --all-databases --events > {{ env['VAULT'] }}/openstack_db_dump.sql
# exit 0

echo "Keystone service"
service openstack-keystone restart
chkconfig openstack-keystone on

export OS_SERVICE_TOKEN=0123456789abcdef0123456789abcdef
export OS_SERVICE_ENDPOINT=http://openstack-controller:35357/v2.0

echo "Keystone roles"
keystone role-create --name=admin
keystone role-create --name=service
#keystone role-create --name=_member_ # already created by 'keystone-manage db_sync'

echo "Keystone tenants"
keystone tenant-create --name=admin --description='Admin Tenant'
keystone tenant-create --name=services --description='Service Tenant'

echo "Keystone roles attribution"
keystone user-role-add --user=admin    --tenant=admin    --role=admin
keystone user-role-add --user=admin    --tenant=admin    --role=_member_
keystone user-role-add --user=keystone --tenant=services --role=admin
keystone user-role-add --user=nova     --tenant=services --role=admin
keystone user-role-add --user=neutron  --tenant=services --role=admin
keystone user-role-add --user=glance   --tenant=services --role=admin
keystone user-role-add --user=heat     --tenant=services --role=admin
        
echo "Keystone service creation"
keystone service-create --name=keystone --type=identity       --description='OpenStack Identity'
keystone service-create --name=glance   --type=image          --description='OpenStack Image Service'
keystone service-create --name=nova     --type=compute        --description='OpenStack Compute'
keystone service-create --name=neutron  --type=network        --description='OpenStack Networking'
keystone service-create --name=heat     --type=orchestration  --description='Orchestration'
keystone service-create --name=heat-cfn --type=cloudformation --description='Orchestration CloudFormation'


echo "Keystone endpoints creation"
## Service, Public, Internal, Admin
{% set endpoints = [
	('identity',       '5000/v2.0',               '5000/v2.0',               '35357/v2.0'              ),
	('image',          '9292',                    '9292',                    '9292'                    ),
	('compute',        '8774/v2/%\(tenant_id\)s', '8774/v2/%\(tenant_id\)s', '8774/v2/%\(tenant_id\)s' ),
	('network',        '9696',                    '9696',                    '9696'                    ),
	('orchestration',  '8004/v1/%\(tenant_id\)s', '8004/v1/%\(tenant_id\)s', '8004/v1/%\(tenant_id\)s' ),
	('cloudformation', '8000/v1',                 '8000/v1',                 '8000/v1'                 )
] -%}
{% for service, public, internal, admin in endpoints %}
keystone endpoint-create --service-id=$(keystone service-list | awk '/ {{ service }} / {print $2}') --publicurl=http://openstack-controller:{{ public }} --internalurl=http://openstack-controller:{{ internal }} --adminurl=http://openstack-controller:{{ admin }}
{% endfor %}


unset OS_SERVICE_TOKEN
unset OS_SERVICE_ENDPOINT

echo "Starting Openstack Services"
{% set items = [ 'openstack-heat-api',
		 'openstack-heat-api-cfn',
		 'openstack-heat-engine',
		 'openstack-nova-api',
		 'openstack-nova-scheduler',
		 'openstack-nova-conductor',
		 'openstack-glance-api',
		 'neutron-server',
		 'openstack-glance-registry',
		 'httpd'
] -%}
{% for service in items %}
service {{ service }} restart 
chkconfig {{ service }} on
{% endfor %}

# Notify that neutron is ready
register neutron-server ready

echo "Removing any old image from Glance"
rm -rf /var/lib/glance/images/*

###############################################################
source /root/.keystonerc

echo "Adding the images to Glance"
for i in {project-computenode-stable,project-loginnode-stable,topolino-q-stable}
do
    glance image-create --file {{ env['VAULT'] }}/$i --disk-format qcow2 --container-format bare  --name "$i" --is-public True
done

echo "Removing existing Mosler flavors"
nova flavor-list | awk '/ mosler\./ {print $2}' | while read flavor; do nova flavor-delete $flavor; done

echo "Adding Mosler flavors"
nova flavor-create mosler.1core   auto 500 10 1
nova flavor-create mosler.2cores  auto 500 10 1
nova flavor-create mosler.4cores  auto 500 10 1
nova flavor-create mosler.8cores  auto 500 10 1
nova flavor-create mosler.16cores auto 500 10 1


exit 0 # Exiting early today
nova aggregate-create service-and-login serv-login
nova aggregate-add-host service-and-login compute1.novalocal
