# -*-sh-*-

# Configuring iptables
# Remove the line
sed -i "/^-A INPUT -m state --state NEW -s {{ env['MGMT_CIDR']|replace('/','\/') }} -j ACCEPT/ d" /etc/sysconfig/iptables
# Insert it before the other line
sed -i "/^-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT/ i \
-A INPUT -m state --state NEW -s {{ env['MGMT_CIDR']|replace('/','\/') }} -j ACCEPT" /etc/sysconfig/iptables

sed -i "/^-A INPUT -m state --state NEW -s {{ env['DATA_CIDR']|replace('/','\/') }} -j ACCEPT/ d" /etc/sysconfig/iptables
# Insert it before the other line
sed -i "/^-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT/ i \
-A INPUT -m state --state NEW -s {{ env['DATA_CIDR']|replace('/','\/') }} -j ACCEPT" /etc/sysconfig/iptables

systemctl restart iptables

#############################################################

sed -i '/server supernode iburst/ d' /etc/chrony.conf
echo 'server supernode iburst' >> /etc/chrony.conf
systemctl enable chronyd.service
systemctl restart chronyd.service

#############################################################

mkdir -p {{ env['CAW_DATA'] }} {{ env['MM_PROJECTS'] }}

if mount | grep -q {{ env['CAW_DATA'] }} ;then umount {{ env['CAW_DATA'] }}; fi
if mount | grep -q {{ env['MM_PROJECTS'] }} ;then umount {{ env['MM_PROJECTS'] }}; fi
sleep 5

mount -t nfs storage:/mnt/data {{ env['CAW_DATA'] }} || exit 1
mount -t nfs storage:/mnt/projects {{ env['MM_PROJECTS'] }} || exit 1
sed -i -e '/storage:/ d' /etc/fstab
echo "storage:{{ env['NFS_ROOT'] }}/data {{ env['CAW_DATA'] }}  nfs   auto,noatime,nolock,bg,nfsvers=4,intr,tcp,actimeo=1800 0 0" >> /etc/fstab
echo "storage:{{ env['NFS_ROOT'] }}/projects {{ env['MM_PROJECTS'] }}  nfs   auto,noatime,nolock,bg,nfsvers=4,intr,tcp,actimeo=1800 0 0" >> /etc/fstab

#############################################################
# Munge and SLURM
for package in -plugins '' -devel -munge -perlapi -sjobexit -sjstat -torque -pam_slurm # -openlava -seff -slurmdbd -slurmdb-direct -sql 
do
    if ! rpm -q slurm${package} >/dev/null; then
	rpm -ivh /home/centos/{{ env['VAULT'] }}/slurm/slurm${package}-16.05.4-1.el7.centos.x86_64.rpm
    fi
done

# Nuke the logs
mkdir -p /var/log/{munge,slurm}
:> /var/log/munge/munged.log
chown -R munge:munge /var/log/munge
:> /var/log/slurm/slurmd.log
chown -R slurm:slurm /var/log/slurm

systemctl restart munge.service
systemctl restart slurmd.service

systemctl enable munge.service
systemctl enable slurmd.service

##############################################################
# Settings
MM_BUILD=/home/centos/tools
mkdir -p $MM_BUILD

##############################################################
# Manta
# See: https://github.com/Illumina/manta
# DL: curl -OJL https://github.com/Illumina/manta/archive/v{{ env['MANTA_VERSION'] }}.zip
if [ ! -x /usr/local/bin/configManta.py ]; then
    if [ ! -d ${MM_BUILD}/manta-{{ env['MANTA_VERSION'] }}.release_src/build ]; then
	rm -rf ${MM_BUILD}/manta-{{ env['MANTA_VERSION'] }}.release_src
	tar -xjf {{ env['VAULT'] }}/sw/manta-{{ env['MANTA_VERSION'] }}.tar.bz2 -C ${MM_BUILD}
	mkdir -p ${MM_BUILD}/manta-{{ env['MANTA_VERSION'] }}.release_src/build # can't be run from its source directory
	pushd ${MM_BUILD}/manta-{{ env['MANTA_VERSION'] }}.release_src/build
	export CC=/bin/cc
	export CXX=/bin/c++
	../src/configure --jobs=4 --prefix=/usr/local
	popd
    fi
    make -j4 -C ${MM_BUILD}/manta-{{ env['MANTA_VERSION'] }}.release_src/build install
fi

##############################################################
# Strelka
# See: https://sites.google.com/site/strelkasomaticvariantcaller/home/strelka-workflow-installation
# DL from: https://sites.google.com/site/strelkasomaticvariantcaller/home/download/strelka_workflow-{{ env['STRELKA_VERSION'] }}.tar.gz?attredirects=0&d=1
if [ ! -x /usr/local/strelka_workflow/bin/configureStrelkaWorkflow.pl ]; then
    rm -rf ${MM_BUILD}/strelka_workflow-{{ env['STRELKA_VERSION'] }}
    tar -xzf {{ env['VAULT'] }}/sw/strelka_workflow-{{ env['STRELKA_VERSION'] }}.tar.gz -C ${MM_BUILD}
    pushd ${MM_BUILD}/strelka_workflow-{{ env['STRELKA_VERSION'] }}
    ./configure --prefix=/usr/local/strelka_workflow
    popd
    make -j4 -C ${MM_BUILD}/strelka_workflow-{{ env['STRELKA_VERSION'] }}
    # Run the demo. Require perl-Data-Dumper
    rm -rf ./strelkaDemoAnalysis
    /usr/local/strelka_workflow/bin/demo/run_demo.bash
fi

##############################################################
# Samtools
# DL: curl -OJL https://github.com/samtools/samtools/releases/download/{{ env['SAMTOOLS_VERSION'] }}/samtools-{{ env['SAMTOOLS_VERSION'] }}.tar.bz2
if [ ! -x /usr/local/samtools/{{ env['SAMTOOLS_VERSION'] }}/bin/samtools ]; then
    rm -rf ${MM_BUILD}/samtools-{{ env['SAMTOOLS_VERSION'] }}.tar.bz2
    tar -xjf {{ env['VAULT'] }}/sw/samtools-{{ env['SAMTOOLS_VERSION'] }}.tar.bz2 -C ${MM_BUILD}
    pushd ${MM_BUILD}/samtools-{{ env['SAMTOOLS_VERSION'] }}
    ./configure --enable-plugins --enable-libcurl --prefix=/usr/local/samtools/{{ env['SAMTOOLS_VERSION'] }}
    make all all-htslib
    make install install-htslib
    popd
fi

##############################################################
# BWA
# DL: curl -OJL https://github.com/lh3/bwa/archive/0.7.8.zip
if [ ! -x /usr/local/bin/bwa ]; then
    rm -rf ${MM_BUILD}/bwa-{{ env['BWA_VERSION'] }}
    unzip {{ env['VAULT'] }}/sw/bwa-{{ env['BWA_VERSION'] }}.zip -d ${MM_BUILD}
    pushd ${MM_BUILD}/bwa-{{ env['BWA_VERSION'] }}
    make
    mv -f bwa /usr/local/bin/.
    chmod +x /usr/local/bin/bwa
    popd
fi

##############################################################
# Adding tools to the PATH, for all users
mkdir -p /mnt
[ -L /mnt/sw ] && unlink /mnt/sw
ln -s /home/centos/{{ env['VAULT'] }}/sw /mnt/sw

sed -i -e "/PATH=\/usr\/local/ d" /etc/bashrc
echo "export PATH=/usr/local/samtools/{{ env['SAMTOOLS_VERSION'] }}/bin:/usr/local/bin:\$PATH" >> /etc/bashrc

