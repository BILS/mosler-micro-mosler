# -*-sh-*-

#############################################################
yum -y install nc nmap tcpdump chrony iptables-services

systemctl enable iptables

#############################################################
# Setting up the web proxy in the environment
# uu_proxy is set up in the init script
for f in /etc/environment ~/.wgetrc
do
    [ -e $f ] && sed -i "/http_proxy/ d" $f
    [ -e $f ] && sed -i "/https_proxy/ d" $f
    cat >> $f <<EOF 
http_proxy="http://uu_proxy:3128/"
https_proxy="https://uu_proxy:3128/"
EOF
done

MM_BUILD=/home/centos/tools
mkdir -p $MM_BUILD

##############################################################
# For the tools

# cat > /etc/yum.repos.d/fedora.repo <<'EOF'
# [fedora]
# name=fedora
# mirrorlist=http://mirrors.fedoraproject.org/mirrorlist?repo=fedora-22&arch=$basearch
# enabled=1
# gpgcheck=0
# EOF
# yum -y install --enablerepo=fedora gcc gcc-c++

# GCC 4.9.2
# yum -y install libmpc-devel mpfr-devel gmp-devel
# if [ ! -x /usr/local/bin/gcc ]; then
#     rm -rf ${MM_BUILD}/gcc-{{ env['GCC_VERSION'] }}.tar.bz2
#     tar -xjf {{ env['VAULT'] }}/sw/gcc-{{ env['GCC_VERSION'] }}.tar.bz2 -C ${MM_BUILD}
#     pushd ${MM_BUILD}/gcc-{{ env['GCC_VERSION'] }}
#     ./configure --disable-multilib --enable-languages=c,c++ #--prefix=/usr/local
#     make -j 4
#     make install
#     popd
# fi

yum -y install tar make bzip2 perl git zlib zlib-devel java-1.8.0-openjdk libstdc++-static gcc gcc-c++
yum -y install ncurses-devel libcurl-devel gnutls-devel nss-devel openssl-devel perl-Data-Dumper

# Installing texlive....it's looooonng !!
# yum -y install R
# So I install a dummy-texlive package instead. Let's see if that breaks later...
[ ! -e texlive-dummy-2012a-1.el7.noarch.rpm ] &&
    curl --proxy http://uu_proxy:3128 -OL http://mirrors.ctan.org/support/texlive/texlive-dummy/EnterpriseLinux-7/texlive-dummy-2012a-1.el7.noarch.rpm

if ! rpm -q texlive-dummy-2012a > /dev/null ; then 
    yum -y install texlive-dummy-2012a-1.el7.noarch.rpm  # --nogpgcheck
fi

yum -y install R
# It cuts down the dependencies from 300 to 100 packages.


#############################################################
# Munge
yum -y install munge munge-devel munge-libs 

# if getent passwd | grep -q munge; then :; else
#     export MUNGEUSER=981
#     groupadd -g $MUNGEUSER munge
#     useradd  -m -c "MUNGE Uid 'N' Gid Emporium" -d /var/lib/munge -u $MUNGEUSER -g munge  -s /sbin/nologin munge
# fi

chown -R munge: /etc/munge/ /var/log/munge/
chmod 0700 /etc/munge/ /var/log/munge/
rsync -a --no-perms {{ env['VAULT'] }}/munge.key /etc/munge/munge.key
chown munge:munge /etc/munge/munge.key
chmod 700 /etc/munge/munge.key

#############################################################
# Dev libs for Slurm
yum -y install openssl openssl-devel pam-devel numactl numactl-devel hwloc hwloc-devel lua lua-devel readline-devel rrdtool-devel ncurses-devel man2html libibmad libibumad perl-ExtUtils-MakeMaker

for package in -plugins '' -devel -munge -perlapi -sjobexit -sjstat -torque -pam_slurm # -openlava -seff -slurmdbd -slurmdb-direct -sql 
do
    if ! rpm -q slurm${package} >/dev/null; then
	rpm -ivh {{ env['VAULT'] }}/slurm/slurm${package}-16.05.4-1.el7.centos.x86_64.rpm
    fi
done

if getent passwd | grep -q slurm; then :; else
    export SLURMUSER=982
    groupadd -g $SLURMUSER slurm
    useradd  -m -c "SLURM workload manager" -d /var/lib/slurm -u $SLURMUSER -g slurm  -s /bin/bash slurm
fi

mkdir -p /etc/slurm
chown slurm:slurm /etc/slurm
rsync -a --no-perms {{ env['VAULT'] }}/slurm.conf /etc/slurm/slurm.conf
chown slurm:slurm /etc/slurm/slurm.conf
chmod 644 /etc/slurm/slurm.conf

mkdir -p /var/spool/slurmd /var/log/slurm
chown slurm: /var/spool/slurmd /var/log/slurm
chmod 755 /var/spool/slurmd /var/log/slurm

touch /var/log/slurm/slurmd.log
chown slurm: /var/log/slurm/slurmd.log

##############################################################
# Manta
# See: https://github.com/Illumina/manta
# DL: curl -OJL https://github.com/Illumina/manta/archive/v{{ env['MANTA_VERSION'] }}.zip
if [ ! -x /usr/local/manta-{{ env['MANTA_VERSION'] }}/bin/configManta.py ]; then
    if [ ! -d ${MM_BUILD}/manta-{{ env['MANTA_VERSION'] }}.release_src/build ]; then
	rm -rf ${MM_BUILD}/manta-{{ env['MANTA_VERSION'] }}.release_src
	tar -xjf {{ env['VAULT'] }}/sw/manta-{{ env['MANTA_VERSION'] }}.tar.bz2 -C ${MM_BUILD}
	mkdir -p ${MM_BUILD}/manta-{{ env['MANTA_VERSION'] }}.release_src/build # can't be run from its source directory
	pushd ${MM_BUILD}/manta-{{ env['MANTA_VERSION'] }}.release_src/build
	export CC=/bin/cc
	export CXX=/bin/c++
	../src/configure --jobs=4 --prefix=/usr/local/manta-{{ env['MANTA_VERSION'] }}
	popd
    fi
    make -j 4 -C ${MM_BUILD}/manta-{{ env['MANTA_VERSION'] }}.release_src/build install
fi

##############################################################
# Strelka
# See: https://sites.google.com/site/strelkasomaticvariantcaller/home/strelka-workflow-installation
# DL from: https://sites.google.com/site/strelkasomaticvariantcaller/home/download/strelka_workflow-{{ env['STRELKA_VERSION'] }}.tar.gz?attredirects=0&d=1
if [ ! -x /usr/local/strelka-{{ env['STRELKA_VERSION'] }}/bin/configureStrelkaWorkflow.pl ]; then
    rm -rf ${MM_BUILD}/strelka_workflow-{{ env['STRELKA_VERSION'] }}
    tar -xzf {{ env['VAULT'] }}/sw/strelka_workflow-{{ env['STRELKA_VERSION'] }}.tar.gz -C ${MM_BUILD}
    pushd ${MM_BUILD}/strelka_workflow-{{ env['STRELKA_VERSION'] }}
    ./configure --prefix=/usr/local/strelka-{{ env['STRELKA_VERSION'] }}
    popd
    make -j 4 -C ${MM_BUILD}/strelka_workflow-{{ env['STRELKA_VERSION'] }}
    # Run the demo. Require perl-Data-Dumper
    rm -rf ./strelkaDemoAnalysis
    /usr/local/strelka-{{ env['STRELKA_VERSION'] }}/bin/demo/run_demo.bash
fi

##############################################################
# Samtools
# DL: curl -OJL https://github.com/samtools/samtools/releases/download/{{ env['SAMTOOLS_VERSION'] }}/samtools-{{ env['SAMTOOLS_VERSION'] }}.tar.bz2
if [ ! -x /usr/local/samtools-{{ env['SAMTOOLS_VERSION'] }}/bin/samtools ]; then
    rm -rf ${MM_BUILD}/samtools-{{ env['SAMTOOLS_VERSION'] }}.tar.bz2
    tar -xjf {{ env['VAULT'] }}/sw/samtools-{{ env['SAMTOOLS_VERSION'] }}.tar.bz2 -C ${MM_BUILD}
    pushd ${MM_BUILD}/samtools-{{ env['SAMTOOLS_VERSION'] }}
    ./configure --enable-plugins --enable-libcurl --prefix=/usr/local/samtools-{{ env['SAMTOOLS_VERSION'] }}
    make all all-htslib
    make install install-htslib
    popd
fi

##############################################################
# BWA
# DL: curl -OJL https://github.com/lh3/bwa/archive/v{{ env['BWA_VERSION'] }}.zip
if [ ! -x /usr/local/bwa-{{ env['BWA_VERSION'] }}/bin/bwa ]; then
    rm -rf ${MM_BUILD}/bwa-{{ env['BWA_VERSION'] }}
    unzip {{ env['VAULT'] }}/sw/bwa-{{ env['BWA_VERSION'] }}.zip -d ${MM_BUILD}
    pushd ${MM_BUILD}/bwa-{{ env['BWA_VERSION'] }}
    make
    mkdir -p /usr/local/bwa-{{ env['BWA_VERSION'] }}/bin
    mv -f bwa /usr/local/bwa-{{ env['BWA_VERSION'] }}/bin/.
    chmod +x /usr/local/bwa-{{ env['BWA_VERSION'] }}/bin/bwa
    popd
fi

##############################################################
# Adding tools to the PATH, for all users
mkdir -p /mnt
[ -L /mnt/sw ] && unlink /mnt/sw
ln -s /home/centos/{{ env['VAULT'] }}/sw /mnt/sw

cat > /etc/profile.d/mmrc.sh <<'EOF'
# micromosler defs

alias ls='ls -h'
alias la='ls -a'
alias lla='ll -a'

for p in manta-{{ env['MANTA_VERSION'] }} bwa-{{ env['BWA_VERSION'] }} strelka-{{ env['STRELKA_VERSION'] }} samtools-{{ env['SAMTOOLS_VERSION'] }}
do [[ "$PATH" =~ "$p" ]] || export PATH="/usr/local/$p/bin:$PATH"; done

#[[ "$PATH" =~ "/mnt/sw" ]] || export PATH=/mnt/sw:$PATH

module () 
{ 
    return 0
}
export -f module
EOF
