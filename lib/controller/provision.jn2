# -*-sh-*-

# Block all incoming connections for the moment
systemctl start iptables
iptables -I INPUT 1 -m state --state RELATED,ESTABLISHED -j ACCEPT
iptables -I INPUT 2 -i lo -j ACCEPT
iptables -I INPUT 3 -j DROP

#iptables -I OUTPUT 1 -o lo -j ACCEPT

# Stopping Services (if existing)
{% set items = [ 'openstack-nova-api',
		 'openstack-nova-scheduler',
		 'openstack-nova-conductor',
		 'openstack-glance-api',
		 'openstack-glance-registry'
] -%}
{% for service in items %}
systemctl stop {{ service }}.service || true
{% endfor %}

# Clean the log files
rm -f /var/log/nova/*.log
rm -f /var/log/glance/*.log
rm -f /var/log/keystone/*.log

# rm -f /var/log/nova/{api,conductor,nova-manage,scheduler}.log
# rm -f /var/log/neutron/server.log
# rm -f /var/log/glance/{api,openstack-glance-api-startup,openstack-glance-registry-startup,registry}.log
# rm -f /var/log/keystone/{keystone,keystone-tokenflush}.log

#############################################################
# Configuring iptables
# Remove the line
sed -i "/^-A INPUT -m state --state NEW -s {{ env['MGMT_CIDR']|replace('/','\/') }} -j ACCEPT/ d" /etc/sysconfig/iptables
# Insert it before the other line
sed -i "/^-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT/ i \
-A INPUT -m state --state NEW -s {{ env['MGMT_CIDR']|replace('/','\/') }} -j ACCEPT" /etc/sysconfig/iptables

sed -i "/^-A INPUT -m state --state NEW -s {{ env['EXT_CIDR']|replace('/','\/') }} -j ACCEPT/ d" /etc/sysconfig/iptables
sed -i "/^-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT/ i \
-A INPUT -m state --state NEW -s {{ env['EXT_CIDR']|replace('/','\/') }} -j ACCEPT" /etc/sysconfig/iptables

systemctl restart iptables

#############################################################
# NTP configuration
sed -i "/allow {{ env['MGMT_CIDR']|replace('/','\/') }}/ d" /etc/chrony.conf
echo "allow {{ env['MGMT_CIDR'] }}" >> /etc/chrony.conf
sed -i "/allow {{ env['DATA_CIDR']|replace('/','\/') }}/ d" /etc/chrony.conf
echo "allow {{ env['DATA_CIDR'] }}" >> /etc/chrony.conf

# Adding ntp1.it.uu.se. No DNS => ip only
sed -i "/server 130.238.15.1 iburst/ d" /etc/chrony.conf
echo "server 130.238.15.1 iburst" >> /etc/chrony.conf

systemctl enable chronyd.service
systemctl restart chronyd.service

#############################################################
# Starting the Message Broker
systemctl enable rabbitmq-server.service
systemctl stop rabbitmq-server.service
[ -f /var/log/rabbitmq/rabbit@controller.log ] && rm -f /var/log/rabbitmq/rabbit@controller.log
systemctl start rabbitmq-server.service

# Preparing the RabbitMQ user
rabbitmqctl add_user openstack rabbit || true
rabbitmqctl set_permissions openstack ".*" ".*" ".*"

#############################################################
# Routing the external network
sed -i "/ {{ env['EXT_CIDR']|replace('/','\/') }} / d" /etc/sysconfig/network-scripts/route-eth0
sed -i "/default via/ i \
table ext {{ env['EXT_CIDR']|replace('/','\/') }} via {{ env['NEUTRON_IP'] }} dev eth0 src {{ env['CONTROLLER_IP'] }}" /etc/sysconfig/network-scripts/route-eth0

sed -i "/ {{ env['EXT_CIDR']|replace('/','\/') }} / d" /etc/sysconfig/network-scripts/rule-eth0
echo "to {{ env['EXT_CIDR'] }} table ext" >> /etc/sysconfig/network-scripts/rule-eth0
echo "from {{ env['EXT_CIDR'] }} table ext" >> /etc/sysconfig/network-scripts/rule-eth0

#############################################################
# System config
## RegExp, Replacement
{% set lines = [
	('^\s*net.ipv4.conf.all.rp_filter\s*=.*$',         'net.ipv4.conf.all.rp_filter=0'         ),
	('^\s*net.ipv4.conf.default.rp_filter\s*=.*$',     'net.ipv4.conf.default.rp_filter=0'     ),
	('^\s*net.ipv4.conf.eth0.rp_filter\s*=.*$',        'net.ipv4.conf.eth0.rp_filter=0'        ),
	('^\s*net.ipv6.conf.all.disable_ipv6\s*=.*$',      'net.ipv6.conf.all.disable_ipv6=1'      ),
	('^\s*net.ipv6.conf.default.disable_ipv6\s*=.*$',  'net.ipv6.conf.default.disable_ipv6=1'  )
] -%}
{% for regexp, line in lines %}
sed -i -e '/{{ regexp }}/ d' /etc/sysctl.conf
echo '{{ line }}' >> /etc/sysctl.conf
{% endfor %}

sysctl -p
systemctl restart network

#############################################################
# Memcached service
systemctl enable memcached.service
systemctl restart memcached.service

#############################################################
# SSL certificate for Nginx (no password)
# CERT=/etc/nginx/cert
# [ -e ${CERT}.key ] && rm -f ${CERT}.key
# [ -e ${CERT}.pem ] && rm -f ${CERT}.pem
# openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout ${CERT}.key -out ${CERT}.pem \
# -passin pass:"" -subj "/C=SE/ST=UPPLAND/L=UPPSALA/O=NBIS/OU=SysDev/CN=mosler.se/emailAddress=admin@localhost"

#############################################################

chown -R keystone:keystone /etc/keystone
rm -rf /var/lib/nova/tmp
mkdir -p /var/lib/nova/tmp
chown nova:nova /var/lib/nova/tmp
openstack-config --set /etc/nova/nova.conf DEFAULT my_ip {{ env['CONTROLLER_IP'] }}

# Token provider
keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone

# Making httpd not listen to port 80
sed -i 's/.*Listen\s*80/#Listen 80/' /etc/httpd/conf/httpd.conf
sed -i 's/.*ServerName\s*.*/ServerName controller/' /etc/httpd/conf/httpd.conf
# /etc/httpd/conf.d/wsgi-keystone.conf is already copied
systemctl enable httpd.service
systemctl restart httpd.service

# Removing Glance by hand
rm -rf /var/lib/glance/image-cache
mkdir -p /var/lib/glance/images
chown glance:glance /var/lib/glance/images
rm -f /var/lib/glance/images/*

chown keystone:keystone /var/log/keystone/keystone.log

#############################################################
# MySQL Databases setup
#############################################################
# MySQL configuration

#systemctl stop mariadb.service
systemctl stop mysqld.service
# removing mariadb
yum --no-deps remove $(yum list installed | awk '/mariadb/ {printf "%s ",$1}')
yum --no-deps remove $(yum list installed | awk '/mysql/ {printf "%s ",$1}')
# removing mariadb
yum install http://www.percona.com/downloads/percona-release/redhat/0.1-3/percona-release-0.1-3.noarch.rpm
yum install Percona-Server-server-57

cat > /etc/my.cnf.d/openstack.cnf <<EOF
[mysqld]
bind-address = {{ env['CONTROLLER_IP'] }}
default-storage-engine=innodb
innodb_file_per_table
max_connections=4096
collation-server=utf8_general_ci
character-set-server=utf8
performance_schema=off
validate_password_length=4
validate_password_policy=LOW
EOF

# Removing databases by hand
# Or check that: http://hakunin.com/six-ansible-practices#path-to-success-3
rm -rf /var/lib/mysql
mkdir --mode=0755 /var/lib/mysql
chown mysql:mysql /var/lib/mysql

#systemctl enable mariadb.service
#systemctl start mariadb.service
systemctl enable mysqld.service
systemctl start mysqld.service

# echo "MySQL root password"
# /usr/bin/mysqladmin -u root -h localhost password 'mysql'
# /usr/bin/mysqladmin -u root -h openstack-controller password 'mysql'
# # Not dropping the .my.cnf file in /root

# Note: Root password is empty at first, then set inside openstack_db.sql.
TMP_PASSWORD=$(grep 'temporary password' /var/log/mysqld.log | tail -1 | sed -e 's/.*root@localhost: \(.*\)/\1/')
# mysql hash: '*E74858DB86EBA20BC33D0AECAE8A8108C56B17FA'
mysql -u root -p"${TMP_PASSWORD}" --connect-expired-password -e "ALTER USER 'root'@'localhost'IDENTIFIED WITH mysql_native_password AS '*E74858DB86EBA20BC33D0AECAE8A8108C56B17FA'"
mysql -u root -pmysql --connect-expired-password -e "uninstall plugin validate_password;"
mysql -u root -pmysql --connect-expired-password -e "SET PASSWORD = PASSWORD('mysql');"

mysql -u root -pmysql < {{ env['VAULT'] }}/openstack_db.sql

{% if env['DO_CHEAT'] == 'yes' %}
echo "MySQL Databases setup (cheat)"
mysql -u root -pmysql < {{ env['VAULT'] }}/openstack_db_dump.sql
{% else %}
{% include 'controller/provision-nocheat.jn2' %}
{% endif %}

#############################################################
# Keystone cron configuration
(crontab -l -u keystone 2>&1 | grep -q token_flush) || \
echo '@hourly /usr/bin/keystone-manage token_flush >/var/log/keystone/keystone-tokenflush.log 2>&1' >> /var/spool/cron/keystone

#############################################################
# Starting Openstack Services
{% set items = [ 'openstack-glance-api',
		 'openstack-glance-registry',
		 'openstack-nova-api',
		 'openstack-nova-scheduler',
		 'openstack-nova-conductor',
] -%}
{% for service in items %}
systemctl restart {{ service }}.service
systemctl enable {{ service }}.service
{% endfor %}
{# 'openstack-nova-consoleauth', 'openstack-nova-novncproxy' #}


#############################################################
source /root/admin.rc
# Removing existing Mosler flavors
nova flavor-list | awk '/ mosler\./ {print $2}' | while read flavor; do nova flavor-delete $flavor; done
# Adding Mosler flavors
nova flavor-create mosler.1core   auto 500 10 1
nova flavor-create mosler.2cores  auto 500 10 1
nova flavor-create mosler.4cores  auto 500 10 1
nova flavor-create mosler.8cores  auto 500 10 1
nova flavor-create mosler.16cores auto 500 10 1
# Adding availability zone and aggregate
nova aggregate-create service-and-login serv-login
