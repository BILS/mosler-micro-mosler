# -*-sh-*-

echo "Stopping Services (if existing)"
{% set items = [ 'openstack-keystone',
		 'neutron-server',
		 'openstack-nova-api',
		 'openstack-nova-scheduler',
		 'openstack-nova-conductor',
		 'openstack-glance-api',
		 'openstack-glance-registry',
		 'openstack-heat-api',
		 'openstack-heat-api-cfn',
		 'openstack-heat-engine',
		 'httpd',
		 'mysqld',
		 'rabbitmq-server'
] -%}
{% for service in items %}
if service {{ service }} status; then
  service {{ service }} stop   
fi
{% endfor %}

echo "Truncate the log files"
truncate --size 0 /var/log/nova/*
truncate --size 0 /var/log/neutron/*

#############################################################

echo "Starting the Message Broker"
service rabbitmq-server start
chkconfig rabbitmq-server on

echo "Preparing the RabbitMQ user"
rabbitmqctl add_user openstack rabbit || true
rabbitmqctl set_permissions openstack ".*" ".*" ".*"

#############################################################

echo "Configuring iptables"
# Remove the line
sed -i "/^-A INPUT -m state --state NEW -s {{ env['MGMT_CIDR']|replace('/','\/') }} -j ACCEPT/ d" /etc/sysconfig/iptables
# Insert it before the other line
sed -i "/^-A INPUT -m state --state NEW .*/ i \
-A INPUT -m state --state NEW -s {{ env['MGMT_CIDR']|replace('/','\/') }} -j ACCEPT" /etc/sysconfig/iptables
service iptables restart

#############################################################

echo "Memcached service"
service memcached restart
chkconfig memcached on

#############################################################
echo "MySQL configuration"

echo "Create MySQL configuration file"
cat > /etc/my.cnf <<EOF
[mysqld]
datadir=/var/lib/mysql
socket=/var/lib/mysql/mysql.sock
user=mysql
# Disabling symbolic-links is recommended to prevent assorted security risks
symbolic-links=0
bind-address = {{ env['DB_SERVER'] }}
default-storage-engine = innodb
innodb_file_per_table
collation-server = utf8_general_ci
init-connect = 'SET NAMES utf8'
character-set-server = utf8

[mysqld_safe]
log-error=/var/log/mysqld.log
pid-file=/var/run/mysqld/mysqld.pid
EOF

echo "Removing databases by hand"
# Or check that: http://hakunin.com/six-ansible-practices#path-to-success-3
rm -rf /var/lib/mysql
mkdir --mode=0755 /var/lib/mysql
chown mysql:mysql /var/lib/mysql

echo "Restarting MySQL server"
service mysqld start

# echo "MySQL root password"
# /usr/bin/mysqladmin -u root -h localhost password 'mysql'
# /usr/bin/mysqladmin -u root -h openstack-controller password 'mysql'
# # Not dropping the .my.cnf file in /root

{% if env['DO_CHEAT'] == 'yes' %}
{% include 'controller/provision-cheat.jn2' %}
{% else %}
{% include 'controller/provision-nocheat.jn2' %}
# mysqldump -u root -pmysql --all-databases --events > /home/centos/vault/openstack_db_dump.sql
# exit 0
{% endif %}

echo "Cron configuration"
# rsync -a {{ env['VAULT'] }}/token_flush_cron         /usr/local/sbin/token_flush_cron
# chmod 0755 /usr/local/sbin/token_flush_cron
# cat > /etc/cron.d/token_flush_cron <<EOF
# 30 23 * * * root  /usr/local/sbin/token_flush_cron
# EOF
(crontab -l -u keystone 2>&1 | grep -q token_flush) || \
echo '@hourly /usr/bin/keystone-manage token_flush >/var/log/keystone/keystone-tokenflush.log 2>&1' >> /var/spool/cron/keystone

cat > /etc/cron.d/update_user_password <<EOF
# Check for updated passwords once every five minutes
*/5 * * * * root /root/update_user_password.py
EOF

source /root/.keystonerc
function wait_for_compute1 {
    local -i t=${1:-30} # default: 30 seconds
    local -i backoff=1
    local -i stride=20
    while (( t > 0 )) ; do
	echo -e "Time left: $t"
	if nova host-list | grep -q compute1.novalocal; then return 0; fi
	(( t-=backoff ))
	sleep $backoff
        if (( (t % stride) == 0 )); then (( backoff*=2 )); fi
    done
    exit 1
}
wait_for_compute1 300

nova aggregate-add-host service-and-login compute1.novalocal


